1.1.15 (2019.04.16)
- разрешено использовать символ '#' в имени отношения 
- исправлены баги с унарным минусом out -X; out -A[2]
- исправлен баг с саморекурсией
- исправлен баг с вложением "//" в строку
- задние графа смыслов по умолчанию для атрибутов senses_graph
- поддержка констант в модулях Math.PI, Math.E
 
1.1.12 (2019.02.20)
- расширен режим отладки модулей Mind и Graph
1.1.8 (2019.02.01)
- поддержка лямбда-выражений: "var a = (arg)=>arg+1"
- out System.line(1) вывод строки вызываемой функции
- убрал все операторы new и delete (багоопасно!)
1.1.7 (2019.01.31)
- добавлена функция System.traceLevel(level)
  без аргументов выводит текущий уровень трассировки,
  с аргументом устанавливает следующие уровни:
  "Verbose"  - "DEBUG","INFO","WARNING","ERROR","CRITICAL"
  "Info"     - "INFO","WARNING","ERROR","CRITICAL"
  "Warnings" - "WARNING","ERROR","CRITICAL"
  "Errors"   - "ERROR","CRITICAL"
  "Disable"  - вывод отключен
- в Mind добавлена функция differnt_vals(1) при которой исключаются дублирующие значения переменных
- добавлена функция set(G1.Sub bear G1.Des -> G2.Sub  bear G2.Des)
  которая сразу разворачивает КНФ и проверяет условия
- в граф теперь можно добавлять аксиомы, которые будут выполнятся при следующем 
  вызове Mind.set_graph()
  a !in b -> a in c      // если "a" не в "b", то "a" в "с"
  a in b | a in c  	 //эквивалентная форма, только в КНФ
1.1.6 (2019.01.30)
- поправил логику функции delete_nodes(): удаляет узлы во всех графах текущего класса
  может вызываться как отдельно так и с графом.
- добавил групповую проверку значений ребер: out [a,b] in [!c,?e]
1.1.4 (2019.01.22)
- в выражениях типа (X in Y) & (Y in Z) -> (X in Z)  скобки можно не ставить
- поправил в Mind.add(X !in X)
- баг out,,<space>\nout
- баг внутри Mind вызов демонов с новыми переменнными
- убрал точку в установке ребра X.E.Y теперь меняем на X E Y
- доступ к полю объекта теперь можно осуществлять через точку (G=>a теперь эквивалентно G.a)
- Evs.add_node().value(S0)
- out Evs[1].value()          //var G = Evs[1];  out G.value()
- "out GRAPH" теперь эквивалентно пустому "out"
- a in [b,!c]; a in !c
- при выводе ошибки выводим имя файла в котором она произошла
- можно вставлять пробел между объектом и постоперацией a += 5
- предупреждение при повторном объявлении функции 
- ошибка паринга (X) != Y
- У графа добавлена функция edges возвращающая массив типов ребер. Если в качестве параметра передан Logic.False, то только добаленных типов ребер
- У вершины добавлены функции bind и unbind - привязывающие и отвязывающие ее от текущего графа
- Добавлена функция exists(X, X @r c, n, m), проверяющая, что  сущестует не менее n и не более m объектов отвечающих отношению.
- В варианте exists(X, X @r c, n) - строго n объектов

1.1.3 (2018.12.17)
- G.nodes a, b объявление узлов для указанного графа
- G.add_node("a") добавление узла в указанный граф по строковому имени
- команда "static" - объявляет статическую переменную блока

1.1.2 (2018.12.13)
- у узла графа добавлена функция get, проверяющая наличие ребер у самого узла и его isa связей.
Может вызываться в вариантах
get(ребро, узел) - возвращает узел
get(ребро)       - возвращает массив узлов
get()            - возвращает map, ключ которого - ребро, значение - массив узлов

- добавлена возможность задавать атрибуты в senses.dic
apple : {
   en : ["apple"],
   ru : ["яблоко"],
   isa : [thing_food, !liquid], 
   sub : [!liquid_food]
   def_en : ["a round fruit with firm, white flesh and a green, red, or yellow skin"],
   def_ru : [""],
   attr: [ count1 = 5, count2 = 3.14, color=[thing, liquid], bool=(0, 1), fus1 = (0,1,2), fus2 = (0,1,2,3) ]
},
Атрибутом может быть число, массив смыслов, logic или нечеткое число

- добавлена проверка предварительного объявления атрибутов
b{
   isa :[a],                    --- a будет найдено потом, ошибки не будет
   obj :[!a],
   sub :[c]                     --- c не будет найдено, выведем ошибку
   attr : [ fus = (0,1,2) ]
}

a {
   ru : ["aaa"],
}

- изменен механизм работы с атрибутами:
  Masha#1[S=>$weight] - возвращает атрибуты не только текущего графа, но и связанных через отношение isa
  Masha#1[S=>$weight] = 50   
  если атрибут ранее отсутствовал, cоздаем его во всех графах текущего класса
  иначе меняем только в текущем
  Теперь значение атрибута хранится в отдельном графе к которому можно обратиться через метод attr()
  S.attr() - граф атрибутов для графа S
  Masha#1.attr() - список всех атрибутов узла Маша
- исправлены баги оператора "for", разрешена конструкция типа for X: которая эквивалентна for X in True:
- count_in и count_out без указания значения теперь считают число ребер с любым значением (раньше было True)

1.1.1 (2018.12.11)
- добавлены операции +=,-=,*=,/=,\=,%=
- заптая в конце команды "out" подавляет перенос коретки
- заптая в конце команды "out" -  подавление переноса коретки
- две заптые между аргументами команды  "out" -  подавление пробела
- две заптые в конце аргументов команды "out" -  подавление пробела и переноса коретки
- X.float() - возвращает вещественное представление переменной любого типа (Logic.p1)
  если конвертация невозможна, возвращает "None"
- Перед Mind.add не нужно теперь писать var X,Y,Z
- Mind.add теперь поддерживает конструкции типа (X in Z) & (Z in Y) -> (X in Y)
- если 2 раза задавать переменную через var нужно выдавать предупреждение
- warnings при выполнении логических операций с разными типами

1.1.0 (2018.12.10)
- сокращенный тип установки ребер
  a in b             //устанавливает значение ребра из узла "a" в узел "b" с типом "in" в True
  a !in b 	     //устанавливает значение ребра из узла "a" в узел "b" с типом "in" в False
  a in b = (0.2,0.8) //устанавливает значение ребра из узла "a" в узел "b" с типом "in" в (0.2,0.8)
- теперь не обязательно использовать символы "$" и "@" в начале имен узлов и типов ребер соответственно  
- в senses добавлены типы ребер has,obj,sub,unit
- в функцию load(file,mode) добавлен второй параметр, указывающий загружать ли описания узлов в качестве значений или нет
  Например:
      senses.dic:
       entity : {
	   en : ["entity"],
	   ru : ["сущность"] 
	   def_ru : ["нечто реально существующее, которое можно увидеть"],
           isa: [ent]
      test.ds:
	GRAPH.load("senses.dic",1)
	out GRAPH=>$$entity.value()
      out:
	{
	 def_ru:[нечто реально существующее, которое можно увидеть],
	 en:[entity],
         name:entity,
         ru:[сущность]
        } 
 
1.0.19 (2018.12.04)
- установка истинного ребра с помощью записи $a(@in,$b) либо nodeVar(@in,$b), где nodeVar - переменная, хранящая узел графа
- поддержка одинарных ковычек в строках. Например: out 'hello world'
- поддержка рекурсивных вызовов демонов
- парсинг присваивания переменной мапы var map = {"name":"Masha","age":7}
- индексная итерация массивов и мэпов 
  for val in [10,9,8]: out val
   10 
   9 
   8 
  for index,val in [10,9,8]: out index,val
   0 10 
   1 9 
   2 8 
  for key in {"first":10,"second":9,"third":8}: out key
   first 
   second 
   third 
  for key,val in {"first":10,"second":9,"third":8} : out key,val
   first 10 
   second 9 
   third 8 
- вывод в формате UTF8
- поддержка файлов UTF8 BOM

1.0.18 (2018.11.21)
- функция add_node добавляет один безимянный узел и возвращает его
- функция splice удаляет указанные элементы из массива согласно спецификации https://developer.mozilla.org/ru/docs/Web/JavaScript/Reference/Global_Objects/Array/splice 
- оптимизация производительности

1.0.17 (2018.11.15)
- изменен приоритет пост операций на следующий:
	X.@name  - связывание объекта ребром
	X++ 	 - постинкремент
	X-- 	 - постдекремент
	X[] 	 - обращение к элементу объекта по индексу
	X.name() - обращение к методу объекта
	X=>name  - обращение к полю объекта

1.0.16 (2018.11.12)
- разрешена корткая запись демона в виде: in(X,Y) get: return X.@in.Y set: return X.@in.Y = value 
- цикл for в стиле range python, но компактнее: for I in range(1, 5): out I
- функция range(first,last,step) возвращает массив последовательных чисел от first до last c шагом step
i- UInt->size_t убрал все warnings
- функция Graph.change(from,to) изменить все значения в графе 
- глобальная функция timer переименована в System.time(), которая работает аналогично вызову time(0)
- глобальная функция out_info переименована в System.stat(), которая работает аналогично вызову out_info()
i- добавлено множество функций в модуль Math.*
i- компиляция под JavaScript


1.0.15 (2018.11.08)
- исправлен баг поочередного присваивания a=b=1
- добавлена проверка числа аргументов в демонах на этапе компиляции
- при выводе в dot-формате при установленном параметре фильтрации ребер, последние отображаются теперь с различными стилями
i- частичный рефакторинг функций
- демон-функции
Пример:
  def in(X,Y)
  { 
    ...					// фрагмент кода, который выполняется при любом режиме работы функции
    get: return X.@in.Y 		// фрагмент кода, который выполняется при получении значения функции. Например: var res = in
    set: return X.@in.Y = value 
  }

1.0.14 (2018.11.07)
- адаптация кода для кроссплатформенной компиляции
- теперь парсер при ошибке выводит только первую и прерывает работу
- убрал имя узла из графа 
- исправлена ошибка парсинга конструкций типа a=b '\n' [a].@isa.b ('\n' - теперь является разделителем между выражениями и пост-операторами "[",".","++","--")
- теперь логическое значение окружаем круглыми скобками
  var a = (0.2,0.4) // logic
  var b = [0.2,0.4] // array
- переименована функция .create в .add_nodes
- поддержка значений узлов:
   nodes $a, $b
   $a.value("12")
   var c = $a.value()
   out c
- поддержка атрибутов узла: $Vasiliy[Sen=>$name] = "Василий"; out $Vasiliy[Sen=>$name]
- доступ к номеру класса графа   out G.class_id()
- два режима вывода графа в dot-формате (4-й параметр): 
  0 - развернутый - атрибуты узлов показываются как есть в графе (Masha -attr-> 20 -isa-> Senses=>age)
  1 - свернутый   - атрибуты узлов показываются в компактном виде (Masha -attr-> age:20)
- функция graph() - получить текущий граф узла
- оператор global в глобальном пространстве теперь открывает доступ к переменной во всех демонах
- в функцию fopen(file,mode) добавлен параметр "mode" - режим открытия файла:
  "w" - создает файл если нужно либо очищает содержимое ранее созданного файла;
  "a" - создает файл если нужно либо открывает его для дозаписи. 

1.0.13 (2018.11.01)
- добавлена возможность загружать граф из базы смыслов 
Пример:
  var Senses = GRAPH("Senses")
  Senses.load("senses.dic")
- разрешена конструкция типа if ... : return
- объявление однокомандных функций def fun() : out a
- тип ребра @isa теперь добавляется автоматически
- убрано ограничение на число вызовов функций-демонов
- функция GRAPH.create(num_nodes) создающая num_nodes безымянных узлов в графе
- функция GRAPH.nodes() выводящая число узлов в графе
- функция GRAPH.edges() выводящая число типов ребер в графе
- доступ к узлам графа по индексу GRAPH[1] 1-й узел графа
- разрещено использовать выражения после GRAPH=> 

1.0.12 (2018.10.30)
- i справочник имен типов рёбер переехал в менеджр графов
- в условный оператор if добавлены ветвления:
 "false" - условие ложно
 "undef" - условие не определено
 "else"  - иначе
Пример:
var X = [0.2,0.8]
if X: out "X is true"
 false out "X is false"
 undef out "X is undef"
 else  out "X is something else"

- добавлены мультиарные условия:  
  E?A:B 	- тернарное условие: если E истинно, то A, иначе B
  E?A:B:C 	- кватернарное условие: если E истинно, то A, если E ложь, то B, иначе С
  E?A:B:C:D 	- квантиринарное условие: если E истинно, то A, если E ложь, то B, если E не определено, то С, иначе D 
- разрешено объявление функции с одной командой через :


1.0.11 (2018.10.29)
- тернарный path
- оператор global после которого можно указать через запятую имена глобальных переменных, доступных из текущего блока 
- добавлены аргументы в функцию GRAPH.dot(fileName,edgesFilter,showLoop):
  edgesFilter - массив типов ребер которые нужно вывести  
  showLoop    - показывать связи-петли из узла в тот-же узел
- складывание строк с произвольным типом значения (var a = 15 out "a="+b результат:a=15)
- операции с графами ("+", "-", "==", "!=") 

1.0.10 (2018.10.25)
- добавлен модуль System и функции:
  System.version()   - версия приложения в числовом виде
  System.versionStr()- версия приложения в строковом виде
  System.error()     - произошла ли ошибка (при последующих вызовах вернет False до наступления следующей шибке)
  System.errorMsg()  - строка последней ошибки
- исправлены ошибки расстановки приоритетов операций (2 < 3 & 1 < 4; 4-2-1 и т.д.)
- доступ к вложенным массивам (a[0][1][0] = 1)
- оператор целочисленного деления "\" (3\2=1)
- исправлен баг с выводом некорректного номера строки и колонки при ошибке парсинга
- добавлен оператор эквивалентности <->

1.0.9 (2018.10.22)
- разрешено экранировать спец. символы в строках ("\"","\\","\t","\n" )

1.0.8 (2018.10.19)
- добавлены функции Math.floor(),Math.ceil(),Math.round(),Math.random() и Math.randomSeed()
- теперь разрешены выражения типа var a = Module.func() + 1
- добавлен оператор продолжения цикла 'continue'

1.0.7 (2018.10.17)
- добавлены функции .count_in и .count_out подсчитывающие число входящих/исходящих ребер

1.0.6 (2018.10.16)
- добавлены отладчик 
- функция .isa
- расширен функционал функций set_edge и edge, теперь аргументами могут быть массивы

1.0.5 (2018.10.08)
- добавлен модуль 'Mind'

1.0.4 (2018.10.05)
- исправлены падения при ссылках на удаленный граф

1.0.3 (2018.10.04)
- добавлен модуль 'Math' и две функции 'sqrt' и 'pow'
- убран 'const' (вместо него нужно исп. 'edges' и 'nodes')
- повышен приоритет операции '==' (теперь верно отработает 'a==b | c==d')
- добавлена операция импликации '->'
- изменен механизм доступа к узлу графа (Senses=>$box)

1.0.2 (2018.10.03)
- в операторах 'if','for','while' перед '{' теперь необязательно ставить ':'
- переменная 'None' как неопределенное значение 
- при вызове 'pop' для пустого массива получим значение переменной 'None' 
- передача отрицательной вещественной константы в функцию (пример fun(-22.53))
- инкремент '++' и декримент '--' переменной (пример: var a=1; a++)
- '%'       операция взятия по модулю (пример: var a = 5%2; out a)
- 'is'      функция проверки наличия элемента в массиве  (пример: var a = [0,1,2]; a.is(1))
- 'find'    функция получения индекса элемента в массиве, если элемент не найден вернет -1 (пример: var a = [0,1,2]; out a.find(1))
- 'unshift' функция вставки элемента в начало массива, (пример: var a = [0,1,2]; a.unshift(1))
- 'shift'   функция получения и удаления первого элемента массива, (пример: var a = [0,1,2]; var b = a.shift())
- 'toString'функция конвертации значения в строку (пример: var a = 5; out a.toString())

1.0.1 (2018.10.02)
- копирование массивов
- изменение элемента массива по индексу
- изменение логического элемента по индексу
- создание графа конструктором
- переход от "const" к "edges" и "nodes"
- работа с различными графами внутри функции
- поддержка связи между графами
- выход из приложения после исполнения скрипта при наличии параметра запуска -q
- фикс: доступ к переменной GRAPH внутри функции